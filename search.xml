<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>关于itsNeko开源博客食用方法</title>
      <link href="/posts/itsneko-opensource-blog.html"/>
      <url>/posts/itsneko-opensource-blog.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">前言：本文是关于itsNeko开源博客食用方法详解，感谢使用本开源博客。时间过的好快，还好我都记录下来了。</div><h3 id="itsNeko开源介绍"><a href="#itsNeko开源介绍" class="headerlink" title="itsNeko开源介绍"></a>itsNeko开源介绍</h3><ul><li>基于<br>itsNeko开源博客是基于Hexo博客Matery主题魔改，感谢各位对本博客的喜爱与支持。</li><li>作者<br>Hello，itsNeko，我是本博客的作者，itsNeko博主博客: <a href="https://nekodeng.gitee.io/" target="_blank">itsNeko博客~</a></li><li>赞赏<br>如果你觉得本开源博客还可以，欢迎大家的赞赏，赞赏二维码见页面：<a href="https://nekodeng.gitee.io/donate/" target="_blank">赞赏itsNeko开源博主~</a></li><li>提示<br>本博客为纯静态，无数据库，文章使用markdown格式，图片存在json里面，整体打包上传至服务器即可。</li><li>建议<br>最好懂一点编程知识，建议使用VsCode，善于使用<code>“ ctrl+F ”</code>快捷键定位然后修改自定义内容。</li></ul><h3 id="源码下载及命令"><a href="#源码下载及命令" class="headerlink" title="源码下载及命令"></a>源码下载及命令</h3><ul><li>本开源博客源码已公开在在博主的GitHub仓库，国内也可使用Gitee，希望得到各位的<code>小星星，Star</code>。</li><li>GitHub仓库：<a href target="_blank">itsNeko开源博客源码GitHub地址</a></li><li><p>Gitee仓库：<a href target="_blank">itsNeko开源博客源码Gitee地址</a></p></li><li><p>首先，新建一个文件夹名为“ <code>nekoblog</code> ”，在该文件夹下打开git bash，执行命令行</p></li></ul><pre><code>git clone 仓库地址</code></pre><ul><li>将下载的整个文件夹在VsCode中打开，在终端中依次执行以下命令行</li></ul><pre><code>npm installhexo inithexo ghexo s</code></pre><ul><li>然后在浏览器中，打开“ <a href="http://localhost:4000/">http://localhost:4000/</a> ”，即可实时预览网站，再依次修改网站内容。</li></ul><p>注意：依次执行完上述4条命令后，若遇到报错极大概率是npm install的问题，也可能是网络问题，建议删除整个“ node_modules ”文件夹，然后重新执行上述命令行。</p><h3 id="各页面配置详解"><a href="#各页面配置详解" class="headerlink" title="各页面配置详解"></a>各页面配置详解</h3><h4 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h4><h5 id="1、网站标题描述等"><a href="#1、网站标题描述等" class="headerlink" title="1、网站标题描述等"></a>1、网站标题描述等</h5><p>在<code>/nekoblog/_config.yml</code>文件中，使用“ ctrl+F ”快捷键定位到<code>“ Site ”</code>，然后自行修改内容。</p><h5 id="2、logo图片与logo字体"><a href="#2、logo图片与logo字体" class="headerlink" title="2、logo图片与logo字体"></a>2、logo图片与logo字体</h5><ul><li>logo图片:<br>在<code>/themes/_config.yml</code>文件中，使用“ ctrl+F ”快捷键定位到<code>“ 配置网站favicon和网站LOGO ”</code>，然后自行修改图片并注意图片格式（此处建议图片大小为180*116最佳）。</li><li>logo字体:<br>在<code>/themes/layout/_partial/header.ejs</code>文件中，使用“ ctrl+F ”快捷键定位到<code>“ itsNeko-openSource-Blog ”</code>，然后自行修改大屏幕和小屏幕下logo字体（此处建议小屏下字体数目不宜过多）。 </li></ul><h5 id="3、banner图上打字效果字体"><a href="#3、banner图上打字效果字体" class="headerlink" title="3、banner图上打字效果字体"></a>3、banner图上打字效果字体</h5><p>在<code>/themes/_config.yml</code>文件中，使用“ ctrl+F ”快捷键定位到<code>“ sub1 ”</code>，然后自行修改。</p><h5 id="4、《质数的孤独》内容部分"><a href="#4、《质数的孤独》内容部分" class="headerlink" title="4、《质数的孤独》内容部分"></a>4、《质数的孤独》内容部分</h5><p>在<code>/themes/layout/_widget/dream.ejs</code>文件中，使用“ ctrl+F ”快捷键定位到<code>“ 《质数的孤独》 ”</code>，然后自行修改标题和内容。</p><h5 id="5、公告栏作者等内容部分"><a href="#5、公告栏作者等内容部分" class="headerlink" title="5、公告栏作者等内容部分"></a>5、公告栏作者等内容部分</h5><p>在<code>/themes/layout/index.ejs</code>文件中，使用“ ctrl+F ”快捷键定位到<code>“ 公告文字栏开始 ”</code>，然后自行修改内容。</p><h5 id="6、footer内容部分"><a href="#6、footer内容部分" class="headerlink" title="6、footer内容部分"></a>6、footer内容部分</h5><p>在<code>/themes/layout/_partial/footer.ejs</code>文件中，使用“ ctrl+F ”快捷键定位到<code>“ 版权信息 ”</code>，然后自行修改各类内容；此处还要在<code>/themes/_config.yml</code>文件中，使用“ ctrl+F ”快捷键定位到<code>“ socialLink ”</code>，然后自行修改。</p><h4 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h4><h5 id="1、配置个人信息"><a href="#1、配置个人信息" class="headerlink" title="1、配置个人信息"></a>1、配置个人信息</h5><p>在<code>/themes/_config.yml</code>文件中，使用“ ctrl+F ”快捷键定位到<code>“ profile ”</code>，然后自行修改头像、职业和个人介绍。</p><h5 id="2、个人介绍内容"><a href="#2、个人介绍内容" class="headerlink" title="2、个人介绍内容"></a>2、个人介绍内容</h5><p>在<code>/themes/layout/about.ejs</code>文件中，使用“ ctrl+F ”快捷键定位到<code>“ 关于我哦 ”</code>，然后自行个人介绍介绍。</p><h4 id="相册"><a href="#相册" class="headerlink" title="相册"></a>相册</h4><h5 id="1、页面介绍"><a href="#1、页面介绍" class="headerlink" title="1、页面介绍"></a>1、页面介绍</h5><p>在<code>/themes/layout/galley.ejs</code>文件中，使用“ ctrl+F ”快捷键定位到<code>“ itsNeko开源博客相册 ”</code>，然后自行修改此内容。</p><h5 id="2、相册数据"><a href="#2、相册数据" class="headerlink" title="2、相册数据"></a>2、相册数据</h5><p>相册是存在json里面的，在<code>/nekoblog/source/_data/galley.json</code>文件中。一个相册就是在一个{}对象内的json数据。</p><h5 id="3、新建一个相册流程"><a href="#3、新建一个相册流程" class="headerlink" title="3、新建一个相册流程"></a>3、新建一个相册流程</h5><ul><li>首先，找到<code>/nekoblog/source/galley</code>文件夹。</li><li>复制已存在的“ itsNeko博主的绘画作品 ”文件夹，并取名。</li><li>打开新取名文件夹下的index.md文件，然后修改title字段必须与新取名文件夹名称相同，否则运行报错。</li><li>然后，在<code>/nekoblog/source/_data/galley.json</code>文件中，复制已存在的{}对象内的json数据，与第一段并以逗号区隔，然后修改新相册的各类内容。并注意：<code>name，url_name，album内的title这三个字段内容必须与新取名文件夹名称相同，否则运行报错。</code></li></ul><h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><h5 id="增加友情链接"><a href="#增加友情链接" class="headerlink" title="增加友情链接"></a>增加友情链接</h5><ul><li>友链信息是存储在<code>/nekoblog/source/_data/friends.json</code>文件中，一个友链就是在一个{}对象内的json数据，自行增添。</li></ul><h5 id="增加网址收藏"><a href="#增加网址收藏" class="headerlink" title="增加网址收藏"></a>增加网址收藏</h5><ul><li>网址收藏信息是存储在<code>/nekoblog/source/_data/collection.json</code>文件中，一个网址信息就是在一个{}对象内的json数据，自行增添。</li></ul><h4 id="其余"><a href="#其余" class="headerlink" title="其余"></a>其余</h4><p>其余页面自定义修改的内容不多，或者没必要修改，这里给出其余页面的对应文件，可自行根据需要定位到对应页面文件中进行修改。</p><ul><li><code>书单 -&gt; /themes/layout/books.ejs</code></li><li><code>留言板 -&gt; /themes/layout/contact.ejs</code></li><li><code>实战项目 -&gt; /themes/layout/project.ejs</code></li><li><code>博客打赏记录 -&gt; /themes/layout/donate.ejs</code></li><li><code>ticktack -&gt; /themes/layout/ticktack.ejs</code></li><li><code>实战项目 -&gt; /themes/layout/project.ejs</code></li><li><code>vlog -&gt; /themes/layout/videos.ejs</code><br>使用“ ctrl+F ”快捷键定位到<code>“ src=”//player.bilibili ”</code>，然后自行修改两个视频的src，建议使用B站的外链。</li><li><code>music -&gt; /themes/layout/musics.ejs</code><br>使用“ ctrl+F ”快捷键定位到<code>“ id=” ”</code>，然后自行修改两个歌单的id，建议使用网易云和QQ音乐的外链。</li><li><code>urls.txt -&gt; /nekoblog/urls.txt</code>将内容替换成自己网站的url地址即可。</li><li><code>网站2个_config.yml文件 -&gt; 主要是网站的总体配置，自行打开两个文件然后只修改里面的包含个人信息的部分，其余不动。</code></li></ul><h3 id="撰写第一篇文章"><a href="#撰写第一篇文章" class="headerlink" title="撰写第一篇文章"></a>撰写第一篇文章</h3><ul><li>修改完个人信息后，你便可以撰写属于你的第一篇文章啦。</li><li>文章采用markdown语法，所有文章存储在<code>/nekoblog/source/_posts</code>文件夹中。</li><li>这里我已给出常用的两类文章模板，可直接复制粘贴然后（修改文章名，链接后缀建议用英文，标签建议只用一个，分类，时间，以及文章banner图片）形成新的文章。</li></ul><h3 id="怎样开通评论"><a href="#怎样开通评论" class="headerlink" title="怎样开通评论"></a>怎样开通评论</h3><ul><li>本开源博客使用valine评论，环境以及搭好，只需填写valine配置数据即可。</li><li>自行根据网上教程得到配置数据，关键词 “ Hexo 博客添加 Valine 评论系统 ”，教程之一：<a href="https://www.zhyong.cn/posts/95cb/" target="_blank">Hexo 博客添加 Valine 评论系统</a></li><li>注意：本开源博客中已经搭好了环境，<code>比如valine.min.js，valine.ejs等文件已经存在，不用再根据教程添加这些文件</code>，只需根据教程步骤配置其余，然后获取到 APP ID 和 APP KEY。</li><li>然后，将获取到的 APP ID 和 APP KEY，在<code>/themes/_config.yml</code>文件中，使用“ ctrl+F ”快捷键定位到<code>“ valine ”</code>，然后自行修改appId，appKey值即可。</li><li>多说一句，若最后评论功能总是报错，不知道怎么弄，那么建议一切根据外链教程（这个不行，换个完整版教程）操作，可替换本博客已经存在的环境文件，<code>学会自己独立使用浏览器解决问题</code>。</li></ul><h3 id="网站怎样上线"><a href="#网站怎样上线" class="headerlink" title="网站怎样上线"></a>网站怎样上线</h3><ul><li><p><code>免费版 使用gitee免费托管</code><br>关键词，“ Hexo部署到Gitee ”，随机教程：<a href="https://blog.csdn.net/qq_38157825/article/details/112783631" target="_blank">Hexo 部署到 Gitee</a></p></li><li><p><code>收费版 自行购买域名服务器</code><br>关键词，“ Hexo部署到自己服务器 ”</p></li></ul><h3 id="七零八碎补充"><a href="#七零八碎补充" class="headerlink" title="七零八碎补充"></a>七零八碎补充</h3><p>可自行根据需要定位到对应文件中进行修改。</p><ul><li><p><code>赞赏二维码图片 -&gt; /themes/source/medias/reward</code></p></li><li><p><code>鼠标左键点击文字 -&gt; /themes/source/js/click_show_text.js</code></p></li><li><p><code>网站标题栏和footer栏背景颜色 -&gt; /themes/source/css/matery.css</code><br>在该文件中使用“ ctrl+F ”快捷键定位到<code>“ 网站标题栏和footer栏背景颜色 ”</code>，然后自行修改颜色。</p></li><li><p><code>各大页面banner图 -&gt; 若你不想使用默认图片，将以下代码复制到对应页面ejs文件中并修改图片链接即可。</code></p></li></ul><pre><code>&lt;style&gt;  /* banner背景图 */  .bg-cover &#123;      background-image: url(&quot;图片链接地址&quot;)!important;  &#125;&lt;/style&gt;</code></pre><h3 id="怎样联系itsNeko"><a href="#怎样联系itsNeko" class="headerlink" title="怎样联系itsNeko"></a>怎样联系itsNeko</h3><ul><li>留言：itsNeko博客地址:<a href="https://nekodeng.gitee.io/" target="_blank">itsNeko博客~</a></li><li>邮箱：nekodeng@qq.com</li><li>QQ: 2018854221</li></ul>]]></content>
      
      
      <categories>
          
          <category> itsNeko博客食用方法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 关于itsNeko开源博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>这是技术文章模板</title>
      <link href="/posts/articletemplate.html"/>
      <url>/posts/articletemplate.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="note info">前言，技术文章前言技术文章前言技术文章前言技术文章前言技术文章前言技术文章前言技术文章前言技术文章前言技术文章前言技术文章前言技术文章前言技术文章前言技术文章前言。</div><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><ul><li>项目1</li><li>项目2</li><li>项目3</li></ul><p>正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文正文</p><p><img src="/posts/articletemplate.htm/图片url" alt="图片介绍"></p><p><code>正文一些需要高亮色的文字</code></p><p><a href="链接地址" class="LinkCard" target="_blank">引入链接</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript基础</title>
      <link href="/posts/cfea.html"/>
      <url>/posts/cfea.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h2 id="js书写位置"><a href="#js书写位置" class="headerlink" title="js书写位置"></a>js书写位置</h2><h3 id="行内式-直接把代码书写在标签身上-强烈不推荐"><a href="#行内式-直接把代码书写在标签身上-强烈不推荐" class="headerlink" title="行内式-直接把代码书写在标签身上(强烈不推荐)"></a>行内式-直接把代码书写在标签身上(强烈不推荐)</h3><a id="more"></a><p>​        + a 标签</p><ul><li><p>​    =&gt; 因为 a 标签本身就有行为出现</p></li><li><p>​    =&gt; 当我点击的时候, 需要区分你是跳转连接还是执行 JS 代码</p></li><li><p>​    =&gt; 在 href 属性里面书写一个 javascript: JS代码 ;</p><pre class=" language-lang-html"><code class="language-lang-html"><a href="javascript: alert('kick your ass');">click me</a></code></pre></li></ul><p>​     非 a 标签</p><ul><li>​    =&gt; 因为没有自己的行为, 我们需要给他加一个行为</li><li>​    =&gt; 写一个 onclick 属性, 表示当点击时</li><li>​    =&gt; 属性值的位置书写 JS 代码</li></ul><pre class=" language-lang-html"><code class="language-lang-html"><a href="javascript: alert('hello world') ;">点我一下试试</a></code></pre><p><a href="javascript: alert('hello world') ;">点我一下试试</a></p><h3 id="内嵌式-把代码书写在script对内"><a href="#内嵌式-把代码书写在script对内" class="headerlink" title="内嵌式-把代码书写在script对内"></a>内嵌式-把代码书写在script对内</h3><ol><li></li></ol><p>特点:</p><p>再一个页面内可以书写无限个 script 标签</p><p>会按照从上到下的顺序依次执行</p><p>  理论上 script 标签可以放在页面的任何位置</p><p>推荐放在 body 的末尾或者 head 的末尾</p><p>  目前推荐放在 body 的末尾</p><pre class=" language-lang-html"><code class="language-lang-html"><script>alert('hello world')<script></code></pre><h3 id="外链式-JS-代码"><a href="#外链式-JS-代码" class="headerlink" title="外链式 JS 代码"></a>外链式 JS 代码</h3><p>   + 把 JS 代码写在一个 .js 后缀的文件里面</p><p>   + 再页面上通过 script 标签的 src 属性引入页面</p><p>   + 注意: <strong>不需要任何行为, 只要打开页面就会执行</strong></p><p>   + 特点:</p><p>​    \1. 和内嵌式一样</p><p>​    \2. 当一个 script 标签呗当作外链式使用的时候, 那么写在标签对里面的内容没有意义</p><p>​     =&gt; 哪怕你写了 src 属性, 但是没有引入文件, 也不能当作内嵌式使用了</p><pre class=" language-lang-html"><code class="language-lang-html">  <script src="./test.js">    alert(12345677)  </script></code></pre><h2 id="js的输出语法"><a href="#js的输出语法" class="headerlink" title="js的输出语法"></a>js的输出语法</h2><ol><li>alert()</li></ol><p>​     =&gt; 以浏览器弹出层的形式展示内容</p><p>​     =&gt; 小括号里面书写你要输出的内容</p><ol><li>console.log()</li></ol><p>​     =&gt; 再浏览器控制台打印你要输出的内容</p><p>​     =&gt; 小括号里面书写你要输出的内容</p><ol><li>document.write()</li></ol><p>​     =&gt; 再页面直接写入你要输出的内容</p><p>​     =&gt; 小括号里面书写你要输出的内容</p><p>​     =&gt; 特殊:</p><p>​      -&gt; 直接把内容输出再页面上</p><p>​      -&gt; 所以可以解析标签</p><p><img src="https://cdn.jsdelivr.net/gh/jnylife/ImgHosting/img/202111161343103.png" alt="image-20211116134308575"></p><h3 id="最小公倍数"><a href="#最小公倍数" class="headerlink" title="最小公倍数"></a>最小公倍数</h3><pre class=" language-lang-js"><code class="language-lang-js">   var a=prompt('输入一个数字')   var b=prompt('在输入一个数字')  if(a<b)&#123;      for(var i=b;i<=a*b;i++)&#123;          if(i % b=== 0 && i % a === 0)&#123;              document.write(i+' ')              break;          &#125;      &#125;  &#125;  if(a>=b)&#123;        for(var i=a;i<=a*b;i++)&#123;            if(i % b=== 0 && i % a === 0)&#123;                document.write(i+' ')                break;            &#125;        &#125;  &#125;</code></pre><h3 id="最大公约数"><a href="#最大公约数" class="headerlink" title="最大公约数"></a>最大公约数</h3><pre class=" language-lang-js"><code class="language-lang-js">   var a=prompt('输入一个数字')   var b=prompt('在输入一个数字')  if(a<b)&#123;      for(var i=a;i>=1;i--)&#123;          if(b % i === 0 && a % i === 0)&#123;              document.write(i+' ')              break;          &#125;      &#125;  &#125;  if(a>=b)&#123;      for(var i=b;i>=1;i--)&#123;                if(b % i === 0 && a % i === 0)&#123;                    document.write(i+' ')                    break;                &#125;      &#125;  &#125;</code></pre><h2 id="JavaScript函数"><a href="#JavaScript函数" class="headerlink" title="JavaScript函数"></a>JavaScript函数</h2><h3 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h3><p><img src="https://cdn.jsdelivr.net/gh/jnylife/ImgHosting/img/202111161750323.png" alt="image-20211116175005189"></p><h3 id="函数执行"><a href="#函数执行" class="headerlink" title="函数执行"></a>函数执行</h3><p><img src="https://cdn.jsdelivr.net/gh/jnylife/ImgHosting/img/202111161752299.png" alt="image-20211116175239255"></p><h3 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h3><pre class=" language-lang-js"><code class="language-lang-js">function fn(n)&#123;    if(n === 1) return 1;    return n * fn(n-1);&#125;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/jnylife/ImgHosting/img/202111161935792.png" alt="image-20211116193514358"></p><h3 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h3><pre class=" language-lang-js"><code class="language-lang-js">function fn(n)&#123;if(n==1 || n==2) return 1;return fn(n-1) * fn(n-2);&#125;</code></pre><h2 id="js作用域"><a href="#js作用域" class="headerlink" title="js作用域"></a>js作用域</h2><p>范围：全局作用域，私有作用域。</p><p><img src="https://cdn.jsdelivr.net/gh/jnylife/ImgHosting/img/202111171716583.png" alt="image-20211117171551946"></p><h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><p>自己有用自己的，自己没有用父级的</p><p>以此类推，到全局都没有就报错。</p><p><img src="https://cdn.jsdelivr.net/gh/jnylife/ImgHosting/img/202111171718332.png" alt="image-20211117171833262"></p><h3 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h3><p>自己给自己的赋值 ，自己没有给父级的赋值</p><p>以此类推 ，到全局都没有，定义全局再赋值。</p><p><img src="https://cdn.jsdelivr.net/gh/jnylife/ImgHosting/img/202111171720013.png" alt="image-20211117172012961"></p><h2 id="对象数据类型"><a href="#对象数据类型" class="headerlink" title="对象数据类型"></a>对象数据类型</h2><p><img src="https://cdn.jsdelivr.net/gh/jnylife/ImgHosting/img/202111171725160.png" alt="image-20211117172555111"></p><pre class=" language-lang-js"><code class="language-lang-js">var obj&#123;a:100,b:true,c:'hello world'&#125;</code></pre><h3 id="对象的操作"><a href="#对象的操作" class="headerlink" title="对象的操作"></a>对象的操作</h3><ol><li>点语法<br>1-1. 添加一个成员<br>  =&gt; 语法: 对象名.成员名 = 值<br>1-2. 删除一个成员<br>  =&gt; 语法: delete 对象名.成员名<br>1-3. 修改一个成员<br>  =&gt; 语法: 对象名.成员名 = 值<br>  =&gt; 原先有就是修改, 原先没有就是添加<br>1-4. 查询某一个成员的值<br>  =&gt; 语法: 对象名.成员名<br>  =&gt; 当你访问一个对象里面没有的成员的时候<br>  =&gt; 会给你一个 undefined</li></ol><h2 id="数组数据类型"><a href="#数组数据类型" class="headerlink" title="数组数据类型"></a>数组数据类型</h2><p>var arr =[ 100 ]</p><ol><li><p>数组关联语法</p><pre><code> 1-1. 添加一个成员   =&gt; 语法: 对象名[&#39;成员名&#39;] = 值 1-2. 删除一个成员   =&gt; 语法: delete 对象名[&#39;成员名&#39;] 1-3. 修改一个成员   =&gt; 语法: 对象名[&#39;成员名&#39;] = 值   =&gt; 原先有就是修改, 原先没有就是添加 1-4. 获取一个成员的值   =&gt; 语法: 对象名[&#39;成员名&#39;] </code></pre><p>   arr.length获取长度</p><p>   arr.length=3 设置数组长度</p><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><pre class=" language-lang-js"><code class="language-lang-js">   var arr[9,2,4,5,3,6,7,1,8]   for(j=0;j<arr.length-1;j++)&#123;   for(i=0 ;i<arr.length-1-j;i++)     if (arr[i+1]<arr[i])&#123;       var temp=arr[i]       arr[i]=arr[i+1]       arr[i+1]=temp       &#125;     &#125;</code></pre><p>   arr[9,2,4,5,3,6,7,1,8]  =&gt; arr[1,2,3,4,5,6,7,8,9]</p></li></ol><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><pre class=" language-lang-js"><code class="language-lang-js"> var arr = [9, 2, 6, 4, 3, 8, 5, 7, 1]    // 2. 重复执行步骤一    for (var j = 0; j < arr.length - 1; j++) &#123;      var minIndex = j      for (var i = j + 1; i < arr.length; i++) &#123;        if (arr[i] < arr[minIndex]) &#123;          minIndex = i        &#125;      &#125;      var tmp = arr[j]      arr[j] = arr[minIndex]      arr[minIndex] = tmp    &#125;    console.log(arr)</code></pre><p>arr[9,2,4,5,3,6,7,1,8]  =&gt; arr[1,2,3,4,5,6,7,8,9]</p><h2 id="数组常用方法"><a href="#数组常用方法" class="headerlink" title="数组常用方法"></a>数组常用方法</h2><pre><code>+ 就是 JS 自带一些操作数组得方法+ 数组常用方法得使用格式, 必须是 数组.xxx()+ 数组和伪数组得区别  =&gt; length 和 索引都一样, 循环遍历都一样  =&gt; 长得也一样  =&gt; 唯独数组常用方法, 伪数组同不了</code></pre><ol><li><p>push()</p><p>=&gt; 语法: 数组.push(数据1, 数据2, 数据3, …)<br>=&gt; 作用: 把所有得参数按照顺序追加到数组得末尾位置<br>=&gt; 返回值: 追加以后数组得长度<br>=&gt; 直接操作原始数组</p></li><li><p>pop()</p><p>=&gt; 语法: 数组.pop()<br>=&gt; 作用: 删除数组得最后一个数据<br>=&gt; 返回值: 被删除得数据<br>=&gt; 直接操作原始数组</p></li><li><p>unshift()</p><p>=&gt; 语法: 数组.unshift(数据1, 数据2, 数据3, …)<br>=&gt; 作用: 从数组得最前面插入一些数据<br>=&gt; 返回值: 插入后得数组长度<br>=&gt; 直接操作原始数组</p></li><li><p>shift()</p><p>=&gt; 语法: 数组.shift()<br>=&gt; 作用: 删除数组得最前面一个数据<br>=&gt; 返回值: 被删除得数据<br>=&gt; 直接操作原始数组<br>*/</p></li></ol><p>// 1. push()<br>// var arr = [‘hello’, ‘world’, ‘你好’, ‘世界’]<br>// var res = arr.push(‘新来的’, ‘新来的2’, [10, 20])<br>// console.log(res)<br>// console.log(arr)</p><p>// 2. pop()<br>// var arr = [‘hello’, ‘world’, ‘你好’, ‘世界’]<br>// var res = arr.pop()<br>// console.log(res)<br>// console.log(arr)</p><p>// 3. unshift()<br>// var arr = [‘hello’, ‘world’, ‘你好’, ‘世界’]<br>// var res = arr.unshift(‘新来的’, ‘新来的2’)<br>// console.log(res)<br>// console.log(arr)</p><p>// 4. shift()<br>// var arr = [‘hello’, ‘world’, ‘你好’, ‘世界’]<br>// var res = arr.shift()<br>// console.log(res)<br>// console.log(arr)</p><ol><li><p>reverse()</p><pre><code> =&gt; 语法: 数组.reverse() =&gt; 作用: 反转数组 =&gt; 返回值: 反转后得数组 =&gt; 直接操作原始数组</code></pre><ol><li><p>sort()</p><p>=&gt; 语法:</p><ol><li>arr.sort()<br>-&gt; 按照每一个数据中得每一位数据得 ASCII 码进行排列</li><li>arr.sort(function (a, b) { return a - b })<br>-&gt; 升序排列</li><li>arr.sort(function (a, b) { return b - a })<br>-&gt; 降序排列<br>=&gt; 作用: 数组排序<br>=&gt; 返回值: 排序后得数组<br>=&gt; 直接操作原始数组</li></ol></li><li><p>splice()</p><p>=&gt; 语法:</p><ol><li>数组.splice(开始索引, 多少个)<br>-&gt; 从开始索引, 截取多少个<br>-&gt; 第二个参数可以不写, 直接到末尾</li><li>数组.splice(开始索引, 多少个, 替换数据1, 替换数据2, 替换数据3, …)<br>-&gt; 把替换数据按照顺序插入到你截取得位置<br>-&gt; 注意: <strong>从哪个索引开始删除, 替换数据得第一个就插入哪个位置</strong><br>=&gt; 作用: 有两个</li><li>截取数组</li><li>替换新内容<br>=&gt; 返回值: 一定是一个数组<br>-&gt; 如果你截取多个数据, 数组里面有多个<br>-&gt; 如果你截取一个数据, 数组里面有一个<br>-&gt; 如果你一个都不截取, 那么是一个空数组<br>=&gt; 直接操作原始数组</li></ol></li><li><p>concat()</p><p>=&gt; 语法: 数组.concat(数组1, 数据2, …)<br>=&gt; 作用:<br> -&gt; 如果参数是数组, 那么把数组拆开, 里面每一项追加到原数组后面<br> -&gt; 如果参数数数据, 那么直接追加<br>=&gt; 返回值: 追加好得数组<br>=&gt; 不改变原始数组</p></li><li><p>slice()</p><p>=&gt; 语法:</p><ol><li>数组.slice(开始索引, 结束索引) - 包前不包后<br>-&gt; 第一个参数可以不写, 表示从头<br>-&gt; 第二个参数可以不写, 表示到尾</li><li>数组.slice(开始索引, 结束索引) - 包前不包后<br>-&gt; 参数可以写一个负整数<br>-&gt; 当你书写了一个负整数以后, 表示 length + 负整数<br>=&gt; 作用: 获取数组里面得某些数据<br>=&gt; 返回值: 一个数组<br>-&gt; 如果你获取多个数据, 数组里面有多个<br>-&gt; 如果你获取一个数据, 那么数组里面有一个<br>-&gt; 如果你一个都不获取, 那么是个空数组<br>=&gt; 不改变原始数组</li></ol></li><li><p>join()</p><p>=&gt; 语法: 数组.join(‘连接符号’)<br>-&gt; 不传递, 是按照 逗号(,) 连接<br>-&gt; 你传递什么, 按照什么连接<br>=&gt; 作用: 把数组里面得每一个数据使用连接符号连接在一起<br>=&gt; 返回值: 是一个连接好得内容, 是一个 String 类型<br>*/</p><p>// 5. reverse()<br>// var arr = [‘hello’, ‘world’, ‘你好’, ‘世界’]<br>// var res = arr.reverse()<br>// console.log(res)<br>// console.log(arr)</p><p>// 6. sort()<br>// var arr = [1, 11, 33, 26, 51, 19, 32, 27, 15, 100]<br>// var res = arr.sort()<br>// console.log(res)<br>// console.log(arr)</p><p>// var res = arr.sort(function (a, b) { return a - b })<br>// console.log(res)<br>// console.log(arr)</p><p>// var res = arr.sort(function (a, b) { return b - a })<br>// console.log(res)<br>// console.log(arr)</p><p>// 7. splice()<br>// var arr = [‘hello’, ‘world’, ‘你好’, ‘世界’]<br>// var res = arr.splice(1, 2)<br>// console.log(‘res: ‘, res)<br>// console.log(‘arr: ‘, arr)</p><p>// var res = arr.splice(1, 0, ‘新来的’, ‘新来的2’)<br>// console.log(‘res: ‘, res)<br>// console.log(‘arr: ‘, arr)<br>// [‘hello’, ‘world’, ‘新来的’, ‘你好’, ‘世界’]<br>// [‘hello’, ‘新来的’, ‘world’, ‘你好’, ‘世界’]</p><p>// 8. concat()<br>// var arr = [‘hello’, ‘world’, ‘你好’, ‘世界’]<br>// var res = arr.concat([10, 20], [30, 40], 100)<br>// console.log(res)<br>// console.log(arr)</p><p>// 9. slice()<br>// var arr = [‘hello’, ‘world’, ‘你好’, ‘世界’]<br>// var res = arr.slice(1, 3)<br>// console.log(‘res : ‘, res)<br>// console.log(‘arr : ‘, arr)</p><p>// 因为 length 是 4, -2 得位置实际上相当于 4 + -2, 2<br>// var res2 = arr.slice(1, -1)<br>// console.log(‘res2 : ‘, res2)<br>// console.log(‘arr : ‘, arr)</p><p>// 10. join()<br>var arr = [‘hello’, ‘world’, ‘你好’, ‘世界’]<br>var res = arr.join(‘abcd’)<br>console.log(res)<br>console.log(arr)</p></li></ol></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> JS </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bootstrap入门</title>
      <link href="/posts/fec3.html"/>
      <url>/posts/fec3.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="bootstrap"><a href="#bootstrap" class="headerlink" title="bootstrap"></a>bootstrap</h1><h2 id="布局容器"><a href="#布局容器" class="headerlink" title="布局容器"></a>布局容器</h2><p>1、.container 类用于固定宽度并支持响应式布局的容器(版心)</p><pre class=" language-lang-html"><code class="language-lang-html"> <!-- 固定宽度 --><div class="container" style="background-color: wheat; height: 300px;"></div></code></pre><p>​    2、.container-fluid类用于100% 宽度，占据全部视口（viewport）的容器。(通栏)</p><a id="more"></a><pre class=" language-lang-html"><code class="language-lang-html"><!-- 完整宽度-->        <div class="container-fluid" style="background-color: skyblue; height: 300px;"></div></code></pre><p><img src="https://cdn.jsdelivr.net/gh/jnylife/ImgHosting/img/image-20211115122633231.png" alt="image-20211115122633231"></p><h2 id="栅格网格系统"><a href="#栅格网格系统" class="headerlink" title="栅格网格系统"></a>栅格网格系统</h2><p>默认12格，可以把12格分成4和8等份，也可以把他分成其他等份。</p><pre class=" language-lang-html"><code class="language-lang-html"><link rel="stylesheet" type="text/css" href="bootstrap-3.3.7-dist/css/bootstrap.min.css" /><div class="container">             <!-- 列组合 -->             <div class="row"><!-- 行 .row -->                 <div class="col-md-4" style="background-color: lemonchiffon;">4</div>                 <div class="col-md-8" style="background-color: orange;">8</div>             </div></code></pre><p><img src="https://cdn.jsdelivr.net/gh/jnylife/ImgHosting/img/image-20211115124527193.png" alt="image-20211115124527193"></p><pre class=" language-lang-html"><code class="language-lang-html"><div class="row"><!-- 行 .row -->                 <div class="col-md-2" style="background-color: burlywood;">2</div>                 <div class="col-md-3" style="background-color: mediumseagreen;">3</div>                 <div class="col-md-3" style="background-color: blueviolet;">3</div>                 <div class="col-md-5" style="background-color: mediumslateblue;">5</div>             </div></code></pre><p><img src="https://cdn.jsdelivr.net/gh/jnylife/ImgHosting/img/image-20211115142405439.png" alt="image-20211115142405439"></p><p>超过则自动换行了。</p><h3 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h3><p>在栅格系统中，我们在 Less 文件中使用以下媒体查询（media query）来创建关键的分界点阈值。</p><pre class=" language-lang-css"><code class="language-lang-css">/* 超小屏幕（手机，小于 768px） *//* 没有任何媒体查询相关的代码，因为这在 Bootstrap 中是默认的（还记得 Bootstrap 是移动设备优先的吗？） *//* 小屏幕（平板，大于等于 768px） */@media (min-width: @screen-sm-min) &#123; ... &#125;/* 中等屏幕（桌面显示器，大于等于 992px） */@media (min-width: @screen-md-min) &#123; ... &#125;/* 大屏幕（大桌面显示器，大于等于 1200px） */@media (min-width: @screen-lg-min) &#123; ... &#125;</code></pre><h3 id="列偏移"><a href="#列偏移" class="headerlink" title="列偏移"></a>列偏移</h3><pre class=" language-lang-html"><code class="language-lang-html"> <div class="row">                 <div class="col-md-2" style="background-color: burlywood;">2</div>                 <div class="col-md-3 col-md-offset-1" style="background-color: mediumseagreen;">3</div>                 <div class="col-md-3" style="background-color: blueviolet;">3</div>             </div></code></pre><p><img src="https://cdn.jsdelivr.net/gh/jnylife/ImgHosting/img/image-20211115145309382.png" alt="image-20211115145309382"></p><p>列偏移和列的总数不超过12，否则会跳行。</p><h3 id="列嵌套"><a href="#列嵌套" class="headerlink" title="列嵌套"></a>列嵌套</h3><pre class=" language-lang-html"><code class="language-lang-html"><div class="row">  <div class="col-sm-9">    Level 1: .col-sm-9    <div class="row">      <div class="col-xs-8 col-sm-6">        Level 2: .col-xs-8 .col-sm-6      </div>      <div class="col-xs-4 col-sm-6">        Level 2: .col-xs-4 .col-sm-6      </div>    </div>  </div></div></code></pre><p>可以无限套娃。</p>]]></content>
      
      
      
        <tags>
            
            <tag> bootstrap </tag>
            
            <tag> 响应式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>butterfly主题美化</title>
      <link href="/posts/6e23.html"/>
      <url>/posts/6e23.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="butterly"><a href="#butterly" class="headerlink" title="butterly"></a>butterly</h1><h2 id="PC端展示（白天-夜晚）"><a href="#PC端展示（白天-夜晚）" class="headerlink" title="PC端展示（白天/夜晚）"></a>PC端展示（白天/夜晚）</h2><p><img src="https://cdn.jsdelivr.net/gh/jnylife/ImgHosting/img/GIF%202021-11-14%2015-27-17.gif" alt></p><a id="more"></a><p><img src="https://cdn.jsdelivr.net/gh/jnylife/ImgHosting/img/GIF%202021-11-14%2015-30-07.gif" alt></p><h2 id="移动端展示（白天-夜晚）"><a href="#移动端展示（白天-夜晚）" class="headerlink" title="移动端展示（白天/夜晚）"></a>移动端展示（白天/夜晚）</h2><p><img src="https://cdn.jsdelivr.net/gh/jnylife/ImgHosting/img/GIF%202021-11-14%2015-41-11.gif" alt></p><p><img src="https://cdn.jsdelivr.net/gh/jnylife/ImgHosting/img/GIF%202021-11-14%2015-39-49.gif" alt></p><h2 id="新增valine评论"><a href="#新增valine评论" class="headerlink" title="新增valine评论"></a>新增valine评论</h2><p><img src="https://cdn.jsdelivr.net/gh/jnylife/ImgHosting/img/image-20211114154417654.png" alt="image-20211114154417654"></p><h2 id="twopeople展示"><a href="#twopeople展示" class="headerlink" title="twopeople展示"></a>twopeople展示</h2><p><div class="twopeople">    <div class="container" style="height:200px;">        <canvas class="illo" width="800" height="800" style="max-width: 200px; max-height: 200px; touch-action: none; width: 640px; height: 640px;"></canvas>    </div><br>    <script src="https://cdn.jsdelivr.net/gh/Justlovesmile/CDN/js/twopeople1.js"></script>    <script src="https://cdn.jsdelivr.net/gh/Justlovesmile/CDN/js/zdog.dist.js"></script><br>    <script id="rendered-js" src="https://cdn.jsdelivr.net/gh/Justlovesmile/CDN/js/twopeople.js"></script><br>    <style><br>        .twopeople{<br>            margin: 0;<br>            align-items: center;<br>            justify-content: center;<br>            text-align: center;<br>        }<br>        canvas {<br>            display: block;<br>            margin: 0 auto;<br>            cursor: move;<br>        }    </style><br>&lt;/div&gt;</div></p><h3 id="代码预留"><a href="#代码预留" class="headerlink" title="代码预留"></a>代码预留</h3><pre class=" language-lang-js"><code class="language-lang-js"> .xpand(style='height:200px;')      canvas.illo(width='800' height='800' style='max-width: 200px; max-height: 200px; touch-action: none; width: 640px; height: 640px;')    script(src='https://cdn.jsdelivr.net/gh/xiaopengand/blogCdn@latest/xzxr/twopeople1.js')    script(src='https://cdn.jsdelivr.net/gh/xiaopengand/blogCdn@latest/xzxr/zdog.dist.js')    script#rendered-js(src='https://cdn.jsdelivr.net/gh/xiaopengand/blogCdn@latest/xzxr/twopeople.js')    style.      .card-widget.card-announcement &#123;      margin: 0;      align-items: center;      justify-content: center;      text-align: center;      &#125;      canvas &#123;      display: block;      margin: 0 auto;      cursor: move;      &#125;</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>flex弹性布局</title>
      <link href="/posts/81f5.html"/>
      <url>/posts/81f5.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Flex弹性布局"><a href="#Flex弹性布局" class="headerlink" title="Flex弹性布局"></a>Flex弹性布局</h1><h2 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h2><p>取值：row(默认) | row-reverse | column | column-reverse</p><p>用于控制项目排列方向与顺序，默认row，即横向排列，项目排列顺序为正序1-2-3；row-reverse同为横向排列，但项目顺序为倒序3-2-1。</p><p>column 与row相反，为纵向排列，项目顺序为正序1-2-3，column-reverse同为纵向排列，项目顺序为倒序3-2-1。</p><a id="more"></a><p><img src="/posts/81f5.htm/image-20211111090232270.png" alt="image-20211111090232270"></p><p><img src="/posts/81f5.htm/image-20211111090637410.png" alt></p><pre class=" language-lang-css"><code class="language-lang-css">#header ul&#123;/*ul为空等同于display: flex;flex-direction: row-reverse; 横排倒叙排列*/&#125;#header ul&#123;display: flex;&#125;</code></pre><pre class=" language-lang-html"><code class="language-lang-html"><ul class="r nav">                <li class="r">                    <i class="iconfont iconwode"></i><span>欢迎您，陈浩 管理员</span>                </li>                <li class="r">                    <i class="iconfont iconyuechi"> </i><a href="">修改密码</a>                </li>                <li class="r">                    <i class="iconfont iconshouye"></i><a href="">公司官网</a>                </li>                <li class="r">                    <i class="iconfont iconbianji"></i><a href="">退出</a>                </li>            </ul></code></pre><h2 id="flex-wrap属性"><a href="#flex-wrap属性" class="headerlink" title="flex-wrap属性"></a>flex-wrap属性</h2><p>取值：nowrap(默认) | wrap | wrap-reverse</p><p>用于控制项目是否换行，nowrap表示不换行；</p><p>举个例子：比如容器宽度为300px，容器中有6个宽度为60px的项目，nowrap情况下，项目会强行等分容器宽度从而不换行，那么项目实际宽度也就只有50px了，而非我们自己设置的60px.</p><p><img src="/posts/81f5.htm/image-20211111092656425.png" alt="image-20211111092656425"></p><p>wrap表示换行，即项目不会等分容器宽度，而是根据自身宽度进行排列，如果超出父容器宽度则自然换行。</p><p><img src="/posts/81f5.htm/image-20211111092826346.png" alt="image-20211111092826346"></p><p>wrap-reverse同样表示换行，需要注意的是第一排会紧贴容器底部，而不是我们想象的项目6紧贴容器顶部，效果与wrap相反</p><p><img src="/posts/81f5.htm/image-20211111093007929.png" alt="image-20211111093007929"></p><h2 id="flex-flow属性"><a href="#flex-flow属性" class="headerlink" title="flex-flow属性"></a>flex-flow属性</h2><p>flex-flow属性是flex-deriction与flex-wrap属性的简写集合，默认属性为row nowrap，即横向排列，且不换行，如果需要控制项目排列与换行，推荐使用此属性，而非单独写两个。</p><h2 id="justify-content属性"><a href="#justify-content属性" class="headerlink" title="justify-content属性"></a>justify-content属性</h2><p>justify-content属性定义了项目在主轴上的对齐方式</p><pre class=" language-lang-css"><code class="language-lang-css">.box&#123;    justify-content:flex-start | flex-end | center | space-between |space-around;&#125;</code></pre><ul><li>flex-start（默认值）：左对齐</li><li>flex-end：右对齐</li><li>center：居中</li><li>space-between:两端对齐，项目之间的间隔都相等</li><li>space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li></ul><p><img src="/posts/81f5.htm/1112916-20180725163343859-2034975257.png" style="zoom:67%;"></p><h2 id="align-items属性"><a href="#align-items属性" class="headerlink" title="align-items属性"></a>align-items属性</h2><p>align-items属性定义项目在交叉轴上如何对齐。</p><ul><li>flex-start：交叉轴的起点对齐。</li><li>flex-end：交叉轴的终点对齐。</li><li>center：交叉轴的中点对齐。</li><li>baseline: 项目的第一行文字的基线对齐。</li><li>stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li></ul><p><img src="/posts/81f5.htm/2b0c39c7e7a80d5a784c8c2ca63cde17.png" alt></p><h3 id="完美居中"><a href="#完美居中" class="headerlink" title="完美居中"></a>完美居中</h3><p>在下面的例子中，我们会解决一个非常常见的样式问题：完美居中。</p><p>解决方案：将 justify-content 和 align-items 属性设置为居中，然后 flex 项目将完美居中：</p><p><img src="/posts/81f5.htm/image-20211111130836767.png" alt="image-20211111130836767"></p><pre class=" language-lang-html"><code class="language-lang-html"><style>.flex-container &#123;  display: flex;  justify-content: center;  align-items: center;  height: 300px;  background-color: DodgerBlue;&#125;.flex-container>div &#123;  background-color: #f1f1f1;  color: white;  width: 100px;  height: 100px;&#125;</style></code></pre><h2 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h2><ul><li>flex-start：与交叉轴的起点对齐。</li><li>flex-end：与交叉轴的终点对齐。</li><li>center：与交叉轴的中点对齐。</li><li>space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。</li><li>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li><li>stretch（默认值）：轴线占满整个交叉轴。</li></ul><h2 id="项目属性"><a href="#项目属性" class="headerlink" title="项目属性"></a>项目属性</h2><p>容器属性是加在容器上的，那么项目属性呢，就是写在项目上的，就好比容器属性给ul，项目属性给li差不多一个意思。</p><h3 id="order"><a href="#order" class="headerlink" title="order"></a>order</h3><p>取值：默认0，用于决定项目排列顺序，数值越小，项目排列越靠前。</p><p><img src="/posts/81f5.htm/image-20211111110626605.png" alt="image-20211111110626605"></p><pre class=" language-lang-css"><code class="language-lang-css">.box&#123;width: 300px;height: 200px;background-color: wheat;display: flex;flex-wrap: wrap;&#125;            .box div:nth-of-type(1)&#123;width: 60px;height: 60px;background: pink;line-height: 60px;text-align: center;order: 2;&#125;            .box div:nth-of-type(2)&#123;width: 60px;height: 60px;background: skyblue;line-height: 60px;text-align: center;order: 1;&#125;            .box div:nth-of-type(3)&#123;width: 60px;height: 60px;background: orange;line-height: 60px;text-align: center;order: 0;&#125;</code></pre><h3 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h3><p>取值：默认0，用于决定项目在有剩余空间的情况下是否放大，默认不放大；注意，即便设置了固定宽度，也会放大。</p><p>假设默认三个项目中前两个个项目都是0，最后一个是1，最后的项目会沾满剩余所有空间。</p><p><img src="/posts/81f5.htm/image-20211111110626606.png" alt="image-20211111110904125"></p><p>假设只有第一个项目默认为0，后面两个项目flex-grow均为1，那么后两个项目平分剩余空间。</p><p><img src="/posts/81f5.htm/image-20211111111036956.png" alt="image-20211111111036956"></p><h3 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a>flex-shrink</h3><p>flex-shrink 属性规定某个 flex 项目相对于其余 flex 项目将收缩多少。</p><pre class=" language-lang-html"><code class="language-lang-html"><style> #main &#123;  width: 350px;  height: 100px;  border: 1px solid #000000;  display: flex;&#125;#main div &#123;  flex-grow: 1;  flex-shrink: 1;  flex-basis: 100px;&#125;#main div:nth-of-type(2) &#123;  flex-shrink: 3;&#125;</style></code></pre><p><img src="https://cdn.jsdelivr.net/gh/jnylife/ImgHosting/img/image-20211115103935125.png" alt="image-20211115103935125"></p><p>使第二个弹性项目相比其余项目收缩三倍。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CSS3</title>
      <link href="/posts/7099.html"/>
      <url>/posts/7099.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="CSS3"><a href="#CSS3" class="headerlink" title="CSS3"></a>CSS3</h1><h2 id="浏览器内核"><a href="#浏览器内核" class="headerlink" title="浏览器内核"></a>浏览器内核</h2><p><img src="/posts/7099.htm/a.jpg" style="zoom:80%;"></p><a id="more"></a><h2 id="transition过渡"><a href="#transition过渡" class="headerlink" title="transition过渡"></a>transition过渡</h2><h3 id="transition"><a href="#transition" class="headerlink" title="transition"></a>transition</h3><pre class=" language-lang-css"><code class="language-lang-css"> transition-property: all;         transition-duration: 1s;         transition-delay: 2s;        transition-timing-function:cubic-bezier(.49,-0.75,.88,1.74);</code></pre><p>  transition-property  :  规定设置过渡效果的CSS属性的名称。<br>    transition-duration  :  规定完成过渡效果需要多少秒或毫秒。<br>    transition-delay  :  定义过渡效果何时开始。  ( 延迟(数值为正数)，也可以提前(数值为负数) )<br>    transition-timing-function  :  规定速度效果的速度曲线。</p><p><img src="/posts/7099.htm/aca.jpg" alt></p><h2 id="transform变化"><a href="#transform变化" class="headerlink" title="transform变化"></a>transform变化</h2><p><img src="/posts/7099.htm/1cd1099934ee6f863d56349ed8d2323.png" style="zoom:67%;"></p><p> transform的注意事项：</p><pre><code>    1. 变形操作不会影响到其他元素。    2. 变形操作只能添加给块元素，但是不能添加给内联元素。    3. 复合写法，可以同时添加多个变形操作。        执行是有顺序的，先执行后面的操作，再执行前面的操作。        translate会受到 rotate、scale、skew的影响    4. transform-origin : 基点的位置        x y z(3d)</code></pre><h2 id="animaion动画"><a href="#animaion动画" class="headerlink" title="animaion动画"></a>animaion动画</h2><pre class=" language-lang-css"><code class="language-lang-css">div &#123;  width: 100px;  height: 100px;  background-color: red;  animation-name: example;  animation-duration: 4s;&#125;@keyframes example &#123;  from &#123;background-color: red;  &#125;  to &#123;background-color: yellow;  width:200px;&#125;</code></pre><p><img src="/posts/7099.htm/GIF 2021-11-2 16-37-34.gif" style="zoom:67%;"></p><p>①animation-name: 设置动画的名字。</p><p>②animation-duration : 动画的持续时间<br>③animation-delay : 动画的延迟时间<br>④animation-iteration-count : 动画的重复次数 ，默认值就是1 ，infinite无限次数<br>⑤animation-timing-function : 动画的运动形式</p><p> 注：</p><pre><code>    1. 运动结束后，默认情况下会停留在起始位置。            2. @keyframes :  from -&gt; 0%   ,  to -&gt;  100%</code></pre><p><strong>复合写法：animation:①②③④⑤;</strong></p><pre class=" language-lang-css"><code class="language-lang-css"> ul li:hover img&#123; animation: move 5s;&#125;    @keyframes move&#123;        0%&#123; transform : translate(0,0); opacity:1; &#125;        60%&#123; transform : translate(0,-50px); opacity:0;&#125;        61%&#123; transform : translate(0,20px);&#125;        100%&#123; transform : translate(0,0); opacity:1;&#125;    &#125;/* 淡入淡出效果 */</code></pre><p><img src="/posts/7099.htm/GIF 2021-11-3 12-14-24.gif" style="zoom:80%;"></p><h3 id="animation实现动画加载效果"><a href="#animation实现动画加载效果" class="headerlink" title="animation实现动画加载效果"></a>animation实现动画加载效果</h3><pre class=" language-lang-css"><code class="language-lang-css"><style type="text/css">        .loading&#123;width: 40px;height: 40px;position: relative; margin: 20px auto;&#125;        .loading .box1 ,.loading .box2&#123;width: 100%;height: 100%;position: absolute;&#125;        .loading .box2&#123;transform: rotate(45deg);&#125;        .box1 div ,.box2 div&#123;width: 10px;height: 10px;background: skyblue;border-radius: 50%;position: absolute;animation: load 1.5s infinite linear;&#125;          .box1 div:nth-of-type(1) &#123;left: 0;top: 0;animation-delay: 1.4s;&#125;           .box2 div:nth-of-type(1)&#123;left: 0;top: 0;animation-delay: 1.2s;&#125;        .box1 div:nth-of-type(2) &#123;right: 0;top: 0;animation-delay: 1s;&#125;         .box2 div:nth-of-type(2)&#123;right: 0;top: 0;animation-delay: .8s;&#125;        .box1 div:nth-of-type(3) &#123;right: 0;bottom: 0;animation-delay: .6s;&#125;         .box2 div:nth-of-type(3)&#123;right: 0;bottom: 0;animation-delay: .4s;&#125;         .box1 div:nth-of-type(4) &#123;left: 0;bottom: 0;animation-delay: .2s;&#125;          .box2 div:nth-of-type(4)&#123;left: 0;bottom: 0;animation-delay: 0s;&#125;        @keyframes load&#123;            %0&#123;transform: scale(1);&#125;            50%&#123;transform: scale(0);&#125;            100%&#123;transform: scale(1);&#125;        &#125;    </style></code></pre><p><img src="/posts/7099.htm/c.gif" alt></p><p>animation-fill-mode : 规定动画播放之前或之后，其动画效果是否可见。<br>         none (默认值) : 在运动结束之后回到初始位置，在延迟的情况下，让0%在延迟后生效<br>         backwards  :  在延迟的情况下，让0%在延迟前生效<br>         forwards  :  在运动结束的之后，停到结束位置<br>         both  :  backwards和forwards同时生效</p><p>animation-direction  :  属性定义是否应该轮流反向播放动画。<br> alternate  :  一次正向(0%-100%)，一次反向(100%-0%)<br>     reverse : 永远都是反向 , 从100%-0%<br>     normal (默认值) : 永远都是正向 , 从0%-100%</p><h2 id="transform3D"><a href="#transform3D" class="headerlink" title="transform3D"></a>transform3D</h2><ol><li><p>transform:</p><p>   rotateX() : 绕x轴顺时针旋转</p><p>   rotateY() : 绕y轴顺时针旋转</p><p>   translateZ() : 绕z轴顺时针旋转</p><p>   scaleZ() : 立体元素的厚度</p><p>   3d写法</p><p>   scale3d() : 三个值 x y z</p><p>   translate3d() : 三个值 x y z</p><p>   rotate3d() : 四个值 0|1(x轴是否添加旋转角度)  0|1(y轴是否添加旋转角度)  0|1(z轴是否添加旋转角度)  deg</p></li></ol><h3 id="做一个3d立方体"><a href="#做一个3d立方体" class="headerlink" title="做一个3d立方体"></a>做一个3d立方体</h3><pre class=" language-lang-html"><code class="language-lang-html"><style>    *&#123; margin:0; padding:0;&#125;    ul&#123; list-style: none;&#125;    .box&#123; width:300px; height:300px; border:1px black solid; margin:30px auto; perspective: 200px; perspective-origin: top right;&#125;    .box ul&#123; width:100px; height:100px; margin:100px; position: relative; transform-style:preserve-3d; transition:2s; transform-origin: center center -50px;         /* transform: scaleZ(.5); */        /* transform: scale3d(2,.5,2); */       /*  transform: translate3d(100px,100px,100px); */       transform: rotate3d(1,1,1,30deg);    &#125;    .box ul li&#123; width:100px; height:100px; position: absolute; line-height: 100px; text-align: center; color:white;font-size: 26px; opacity: 0.5; backface-visibility: hidden;&#125;    .box ul li:nth-child(1)&#123; background:red; left: 0; top: 0;&#125;    .box ul li:nth-child(2)&#123; background:blue; left: 100px; top: 0; transform-origin: left; transform: rotateY(90deg);&#125;    .box ul li:nth-child(3)&#123; background:yellow; left: -100px; top: 0; transform-origin: right; transform: rotateY(-90deg);&#125;    .box ul li:nth-child(4)&#123; background:green; left: 0; top: -100px; transform-origin: bottom; transform:rotateX(90deg);&#125;    .box ul li:nth-child(5)&#123; background:pink; left: 0; top: 100px; transform-origin: top; transform:rotateX(-90deg);&#125;    .box ul li:nth-child(6)&#123; background:gray; left: 0; top: 0; transform:translateZ(-100px) rotateY(180deg);&#125;    .box:hover ul&#123; transform: rotate3d(1,1,1,300deg);&#125;    </style></code></pre><p>效果：</p><p><img src="/posts/7099.htm/d.gif" alt></p><p>perspective（观察距离）: 离屏幕多远的距离去观察元素，值越大幅度越小。</p><p>perspective-origin : 观察基点位置，观察元素的角度。perspective-origin : top right。</p><p>transform-origin: center center -50px;   （Z轴只能写数值，不能写单词）</p><p>transform-style : 3D空间<br>    flat  (默认值2d)、preserve-3d   (3d，产生一个三维空间)</p><p>backface-visibility : 背面隐藏<br>    hidden、visible (默认值)</p><h2 id="旋转木马"><a href="#旋转木马" class="headerlink" title="旋转木马"></a>旋转木马</h2><pre class=" language-lang-html"><code class="language-lang-html"> <style>    *&#123; margin:0; padding:0;&#125;    ul&#123; list-style: none;&#125;    img&#123; display: block;width:120px; height:60px;&#125;    .parent&#123; width:600px; height:300px; border:1px black solid; margin: 30px auto; perspective: 700px;&#125;    .parent ul&#123; width:45px; height:30px; margin: 100px auto; position: relative; transform-style: preserve-3d; transition: 2s;&#125;    .parent ul li&#123;  width:100%; height:100%; position: absolute; left: 0; top: 0;&#125;    .parent ul li:nth-child(1)&#123; transform: rotateY(0) translateZ(200px);&#125;    .parent ul li:nth-child(2)&#123; transform: rotateY(60deg) translateZ(200px);&#125;    .parent ul li:nth-child(3)&#123; transform: rotateY(120deg) translateZ(200px);&#125;    .parent ul li:nth-child(4)&#123; transform: rotateY(180deg) translateZ(200px);&#125;    .parent ul li:nth-child(5)&#123; transform: rotateY(240deg) translateZ(200px);&#125;    .parent ul li:nth-child(6)&#123; transform: rotateY(300deg) translateZ(200px);&#125;    .parent:hover ul&#123; transform:rotateY(360deg);&#125; </style></code></pre><p><img src="/posts/7099.htm/e.gif" alt></p><h2 id="CSS3拓展背景样式"><a href="#CSS3拓展背景样式" class="headerlink" title="CSS3拓展背景样式"></a>CSS3拓展背景样式</h2><p>background-size : 背景图的尺寸大小<br>    cover : 覆盖<br>    contain : 包含<br>background-origin : 背景图的填充位置<br>    padding-box (默认)<br>    border-box<br>    content-box<br>background-clip : 背景图的裁切方式<br>    padding-box<br>    border-box (默认)<br>    content-box </p><p>注：复合样式的时候，第一个是位置，第二个是裁切</p><h2 id="图片翻转效果"><a href="#图片翻转效果" class="headerlink" title="图片翻转效果"></a>图片翻转效果</h2><pre class=" language-lang-css"><code class="language-lang-css">  *&#123; margin:0; padding:0;&#125;    img&#123; display: block; width: 200px;height:100px;&#125;    .parent&#123; width:200px; height:100px; margin: 200px auto; position: relative; perspective: 300px;&#125;    .parent div&#123; width:100%; height:100%; position: absolute; left: 0; top: 0; backface-visibility: hidden; transition: .5s;&#125;    .parent div:first-child&#123; transform: rotateY(0); &#125;    .parent div:last-child&#123; transform: rotateY(-180deg);&#125;    .parent:hover div:first-child&#123; transform: rotateY(180deg); &#125;    .parent:hover div:last-child&#123; transform: rotateY(0);&#125;</code></pre><p><img src="/posts/7099.htm/f.gif" alt></p><h2 id="CSS3线性渐变"><a href="#CSS3线性渐变" class="headerlink" title="CSS3线性渐变"></a>CSS3线性渐变</h2><ol><li><p>线性渐变 -&gt; linear-gradient是值，需要添加到background-image属性上</p><p>注：渐变的0度是在页面在下边，正值会按照顺时针旋转，负值按逆时针旋转。</p></li></ol><h2 id="iconfont矢量图标库"><a href="#iconfont矢量图标库" class="headerlink" title="iconfont矢量图标库"></a>iconfont矢量图标库</h2><p>链接：<a href="https://www.iconfont.cn/?spm=a313x.7781069.1998910419.d4d0a486a"> 阿里巴巴矢量图标库</a></p><p>图标引入</p><pre class=" language-lang-css"><code class="language-lang-css">    <link rel="stylesheet" href="./css/iconfont.css">    <script src="./css/iconfont.js"></script> /*彩色图标引入js才是彩色 */</code></pre><pre class=" language-lang-html"><code class="language-lang-html"> <span class="iconfont iconDollar"></span>    <span class="iconfont iconcompass"></span>    <span class="iconfont iconfood-strawberry"></span></code></pre><h2 id="text-shadow"><a href="#text-shadow" class="headerlink" title="text-shadow"></a>text-shadow</h2><div style="font-size:30px;text-shadow:3px 3px  pink">hello world</div><pre class=" language-lang-html"><code class="language-lang-html"><div style="font-size:20px;text-shadow:3px 3px  pink">hello world</div></code></pre><div style="font-size:30px;text-shadow:3px 3px 2px skyblue">hello world</div><pre class=" language-lang-html"><code class="language-lang-html"> <div style="font-size:30px;text-shadow:3px 3px  skyblue">hello world</div></code></pre><div style="font-size:30px; color: white;text-shadow: 2px 2px 4px #000000;">hello world</div><pre class=" language-lang-html"><code class="language-lang-html"><div style="font-size:30px; color: white;text-shadow: 2px 2px 4px #000000;">hello world</div></code></pre><div style="font-size:30px; color: white;text-shadow: 1px 1px 2px black, 0 0 25px blue, 0 0 5px darkblue;">hello world</div><pre class=" language-lang-html"><code class="language-lang-html"><div style="font-size:30px; color: white;text-shadow: 1px 1px 2px black, 0 0 25px blue, 0 0 5px darkblue;">hello world</div></code></pre><div style="font-size:30px;  color: pink;text-shadow: -1px 0 black, 0 1px black, 1px 0 black, 0 -1px black;">hello world</div><pre class=" language-lang-html"><code class="language-lang-html"><div style="font-size:30px;  color: pink;text-shadow: -1px 0 black, 0 1px black, 1px 0 black, 0 -1px black;">hello world</div></code></pre><h2 id="box-shadow"><a href="#box-shadow" class="headerlink" title="box-shadow"></a>box-shadow</h2><div style="font-size:30px; color: white;text-shadow: 2px 2px 4px #000000;">卡片材质效果：</div><div style="  width: 250px;  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);  text-align: center ;margin:5px auto;">  <img src="/posts/7099.htm/pg.jpg" alt="Shanghai" style="width:100%">  <div style="padding:10px">    <p>《phaseless》-pgone</p>  </div></div><pre class=" language-lang-html"><code class="language-lang-html"><div style="  width: 250px;  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);  text-align: center ;margin:5px auto;">  <img src="CSS3/pg.jpg" alt="pgone" style="width:100%">  <div style="padding:10px">    <p>《phaseless》-pgone</p>  </div></div></code></pre><p>  box-shadow: h-shadow v-shadow blur spread color inset;</p><h2 id="分栏布局"><a href="#分栏布局" class="headerlink" title="分栏布局"></a>分栏布局</h2><p>column-count : 分栏的个数<br>column-width : 分栏的宽度<br>column-gap : 分栏的间距<br>column-rule : 分栏的边线<br>column-span : 合并分栏</p><p><strong>注:分栏的宽度和 分栏个数只能设置一个。</strong></p><h2 id="CSS3伪元素"><a href="#CSS3伪元素" class="headerlink" title="CSS3伪元素"></a>CSS3伪元素</h2><p>CSS 伪元素用于设置元素指定部分的样式。</p><p>例如，它可用于：</p><ul><li>设置元素的首字母、首行的样式</li><li>在元素的内容之前或之后插入内容</li></ul><p>请注意<em>双冒号表示法</em> - ::first-line 对比 :first-line</p><p>在 CSS3 中，双冒号取代了伪元素的单冒号表示法。这是 W3C 试图区分<em>伪类</em>和<em>伪元素</em>的尝试。</p><p>在 CSS2 和 CSS1 中，伪类和伪元素都使用了单冒号语法。</p><p>为了向后兼容，CSS2 和 CSS1 伪元素可接受单冒号语法。</p><h2 id="CSS-hack"><a href="#CSS-hack" class="headerlink" title="CSS hack"></a>CSS hack</h2><h3 id="什么是CSS-hack"><a href="#什么是CSS-hack" class="headerlink" title="什么是CSS hack"></a>什么是CSS hack</h3><p>不同厂商和浏览器的版本不同（如IE6-IE11,Firefox/Safari/Opera/Chrome等），导致CSS写法不同，解析方式不同，最后在页面上显示的效果也不同。为了统一在页面上的显示效果，针对不同浏览器写相应的CSS，这种方法称为CSS hack。</p><h3 id="CSS-hack-分类"><a href="#CSS-hack-分类" class="headerlink" title="CSS hack 分类"></a>CSS hack 分类</h3><ol><li><p>CSS属性前缀法<br> .elem{ _background:red; }</p></li><li><p>选择器前缀法</p><p> *html .elem{ }</p></li><li><p>IE条件注释法</p><p> IE10以上已经不支持注释法。</p></li></ol><p><a href="https://blog.csdn.net/freshlover/article/details/12132801">详情见：史上最全的CSS hack方式一览_freshlover的专栏-CSDN博客_css hack</a></p><h2 id="渐进增强和优雅降级"><a href="#渐进增强和优雅降级" class="headerlink" title="渐进增强和优雅降级"></a>渐进增强和优雅降级</h2><p>1.什么是渐进增强</p><p>在网页开发中，渐进增强认为应该专注于内容本身。一开始针对低版本的浏览器构建页面，满足最基本的功能，再针对高级浏 览器进行效果，交互，追加各种功能以达到更好用户体验,换句话说，就是以最低要求，实现最基础功能为基本，向上兼容。以css为例，以下这种写法就是渐进增强。</p><p>2.什么是优雅降级</p><p>在网页开发中，优雅降级指的是一开始针对一个高版本的浏览器构建页面，先完善所有的功能。然后针对各个不同的浏览器进行测试，修复，保证低级浏览器也有基本功能 就好，低级浏览器被认为“简陋却无妨 (poor, but passable)” 可以做一些小的调整来适应某个特定的浏览器。但由于它们并非我们所关注的焦点，因此除了修复较 大的错误之外，其它的差异将被直接忽略。也就是以高要求，高版本为基准，向下兼容。同样以css为例，优雅降级的写法如下。</p><pre class=" language-lang-css"><code class="language-lang-css">.transition&#123;  -webkit-transition: all .5s;     -moz-transition: all .5s;       -o-transition: all .5s;          transition: all .5s;  &#125;/*渐进增强*/</code></pre><pre class=" language-lang-css"><code class="language-lang-css">.transition&#123; 　　     transition: all .5s;　　  -o-transition: all .5s;  　-moz-transition: all .5s; -webkit-transition: all .5s;&#125;/*优雅降级*/</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> CSS3 </tag>
            
            <tag> animation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html5</title>
      <link href="/posts/f306.html"/>
      <url>/posts/f306.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="html"><a href="#html" class="headerlink" title="html"></a>html</h1><h3 id="strong与b、em与i"><a href="#strong与b、em与i" class="headerlink" title="strong与b、em与i"></a>strong与b、em与i</h3><p>表现形态都是 文本加粗  和  文本斜体</p><p>区别：是否具备语义化</p><a id="more"></a><h3 id="引用标签"><a href="#引用标签" class="headerlink" title="引用标签"></a>引用标签</h3><p>blockquote  :  引用大段的段落解释<br>q  :  引用小段的短语解释<br>abbr  :  缩写或首字母缩略词<br>address  :  引用文档地址信息<br>cite  :  引用著作的标题</p><h3 id="map与热区"><a href="#map与热区" class="headerlink" title="map与热区"></a>map与热区</h3><pre class=" language-lang-html"><code class="language-lang-html"><img src="./img/star.jpg" alt="" usemap="#star">    <map name="star">        <!-- <area shape="rect" coords="205 83 386 173" href="https://www.taobao.com" alt=""> -->        <!-- <area shape="circ" coords="300 130 50" href="" alt=""> -->        <area shape="poly" coords="305 99 233 156 256 250 172 197" href="" alt="">    </map></code></pre><h1 id="HTML5新增的语义化标签"><a href="#HTML5新增的语义化标签" class="headerlink" title="HTML5新增的语义化标签"></a>HTML5新增的语义化标签</h1><p>1.header头部标签</p><p>2.nav导航标签</p><p>3.content内容标签</p><p>4.section定义文档某个区域</p><p>5.aside侧边栏标签</p><p>6.footer尾部标签</p><pre><code>定义这些语义化标签的目的是为了简化代码，不需要整个网页都用div标签定义再class，可以直接写&lt;header&gt;/&lt;header&gt;。并且这些语义化标签可读性更强，看到这个标签就知道是哪个部分。</code></pre><h2 id="网页中添加视频文件"><a href="#网页中添加视频文件" class="headerlink" title="网页中添加视频文件"></a>网页中添加视频文件</h2><pre class=" language-lang-html"><code class="language-lang-html"><video width=" 设置宽度" height="设置高度" controls>​           <source src="movie.mp4" type="video/mp4"></video></code></pre><p>autoplay设置视频自动播放（谷歌浏览器需要添加muted才能自动播放）<br>controls可以向用户显示播放控件（播放按钮，进度条，全屏等）<br>width设置播放器宽度<br>height设置高度<br>loop设置视频循环播放<br>muted设置静音播放<br>preload:auto;(预先加载视频)/none(不预先加载) 如果设置了autoplay就忽略该操作<br>poster:imgurl设置加载等待时的画面图片</p><h2 id="网页中添加音频文件"><a href="#网页中添加音频文件" class="headerlink" title="网页中添加音频文件"></a>网页中添加音频文件</h2><pre class=" language-lang-html"><code class="language-lang-html"><audio controls="controls">​           <source src="happy.mp3" type="audio/mpeg">​            <source src="happy.ogg" type="audio/ogg">​             您的浏览器暂不支持<audio>标签。</audio></code></pre><p>它的值有autoplay(自动播放）, controls（显示音频控件）, loop（循环播放）,muted（静音播放），preload（预先加载），src（音频文件的url）</p>]]></content>
      
      
      
        <tags>
            
            <tag> h5 </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS</title>
      <link href="/posts/198d.html"/>
      <url>/posts/198d.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="CSS背景样式"><a href="#CSS背景样式" class="headerlink" title="CSS背景样式"></a>CSS背景样式</h2><p>background-repeat 平铺方式</p><p>​    默认：会水平垂直都铺满背景图</p><p>​    repeat-x   x轴平铺<br>​    repeat-y   y轴平铺</p><a id="more"></a>    repeat ( x , y 都进行平铺，默认值 )no-repeat  都不平铺background-position : 背景位置    x y : number(px、%) | 单词        x : left、center、right        y : top、center、bottombackground-attachment : 背景图随滚动条移动的方式    scroll : 默认值  ( 背景位置是按照当前元素进行偏移的 )    fixed ( 背景位置是按照浏览器进行偏移的 )## CSS边框样式border-style : 边框样式 < solid : 实线,   dashed : 虚线   , dotted : 点线>  border-width : 边框大小边框也可以针对某一天边进行单独设置 : border-left-style : 中间是方向 left、right、top、bottom    ***颜色：透明颜色 transparent***## CSS段落样式text-decoration：文本装饰    下划线 : underline    删除线 :line-through    上划线 : overline    不添加任何装饰 : none    注：添加多个文本修饰：line-through underline overlinetext-transform：文本大小写 （ 针对英文段落 ）    小写：lowercase    大写：uppercase    只针对首字母大写：capitalizetext-indent : 文本缩进    首行缩进    em单位：相对单位，1em永远都是跟字体大小相同text-align : 文本对齐方式    对齐方式 : left 、right、center、justify（两端点对齐）line-height : 定义行高- 什么是行高，一行文字的高度，上边距和下边距的等价关系。  默认行高：不是固定值，而是变化的。根据当前字体的大小再不断的变化。取值：1. number( px )   |  scale ( 比例值 , 跟文字大小成比例的 )letter-spacing : 字之间的间距word-spacing : 词之间的间距  ( 针对英文段落的 )英文和数字不自动折行的问题：    1. word-break : break-all; (非常强烈的折行)        2. word-wrap : break-word;(不是那么强烈的折行 ，会产生一些空白区域)  ## CSS复合样式### backgroundbackground:(backgroud-color)   (background-image)  (background-repeat)/*平铺方式*/ 例：backgournd : gray  url(xxx/xx.jpg)   no-repeat;### borderborder: border-width border-style border-color;例：border: 1px solid #D3f402;边框颜色可省略，默认黑色。border:3px dashed;### font顺序不能反！！！font:font-style font-weight font-family font-size line-height![image-20211016134042542](CSS/image-20211016134042542.png)### marginmargin:margin-top marigin-right margin-bottom margin-left![image-20211016134302326](CSS/image-20211016134302326.png)padding同理。### color颜色的三种写法color: DarkGoldenRod;color:rgb(184,134,11)color:#B8860B;## ## CSS选择器<img src="/posts/198d.htm/image-20211005163728040.png" style="zoom:80%;">### id选择器## &nbsp;&nbsp;&nbsp;#elem{}      id="elem"注：1. ID是唯一值，在一个页面中**只能出现一次**，出现多次是不符合规范的。2. 命名的规范:由字母、下划线、中划线、字母（**并且第一个不能是数字**）### class选择器​    .box{}      class="elem"注：1. class选择器是可以复用的。2. 可以添加多个class样式。   ```html   <div class="content box"></div>   ```3. 多个样式的时候，**样式的优先级根据CSS决定**，而不是class属性中的顺序。4. 标签+类的写法### 标签(元素)选择器​    div{}          <div> </div>​    p{}              <p></p>   应用：1. 去掉某些标签的默认样式时2. 复杂的选择器中，如 层次选择器### 群组选择器(分组选择器)可以通过逗号的方式，给多个不同的选择器添加统一的CSS样式，来达到代码的复用。```css<style>div , #text , .title&#123; background:red;&#125;<style>```### 通配选择器*{  } ->  div,ul,li,p,h1,h2....{}    注：尽量避免使用通配选择器，因为会给所有的标签添加样式，慎用。使用的场景：去除默认样式 *{margin:0; padding:0;}### 层次选择器后代  M N { }```css#list li&#123;border:1px solid red;&#125;```父子  M > N { }```#list > li&#123;border:1px solid red;&#125;```兄弟  M ~ N { }  当前M下面的所有兄弟N标签```cssdiv ~ h2&#123;backgroun:red;&#125;/* h2标签在div标签的下面 */```相邻  M + N { }  当前M下面相邻的N标签```css div + h2&#123;backgroun:red;&#125;```### 属性选择器![image-20211020174941433](CSS/image-20211020174941433.png)```cssdiv[class]&#123;background:red;&#125;div[class=box]&#123;background:red;&#125;div[class=*seaech]&#123;background:red;&#125;div[class=^seaech]&#123;background:red;&#125;div[class=$seaech]&#123;background:red;&#125;div[class][id]&#123;background:red;&#125;``````html<div>aaaaa</div><div class="box" id="elem">bbbb</div><div class="search">cccccc</div><div class="search-button">ddddd</div><div class="button-search">ddddd</div>```### 伪类选择器- M:伪类{}  :link       访问前的样式    ( 只能添加给a标签 )  :visited    访问后的样式    ( 只能添加给a标签 )  :hover      鼠标移入时的样式  (可以添加给所有的标签)  :active     鼠标按下时的样式  (可以添加给所有的标签)- 注：      一般的网站都只设置            a{}   ( link visited active )    a:hover{}:after、:before    通过伪类的方式给元素添加一段文本内容，使用content属性```cssdiv:after&#123;content:"world";color:red;&#125;```:checked、:disabled 、:focus 都是针对表单元素的   ```css:checked&#123;width:100px;height:100px;&#125;:disabled&#123;width:100px;height:100px;&#125;:focus&#123;background：red;&#125;``````html<input type="checkbox"><input type="checkbox" checked><input type="checkbox" checked><input type="text">```#### 结构性伪类选择器- nth-of-type()   nth-child()     角标是从1开始的，1表示第一项，2表示第二项 | n值 表示从0到无穷大     first-of-type&nbsp;  &nbsp;  &nbsp;  &nbsp;  &nbsp;    last-of-type  &nbsp;  &nbsp;  &nbsp;    only-of-type  - nth-of-type()和nth-child()之间的区别   type : 类型  &nbsp;  &nbsp;&nbsp; child : 孩子```cssli:nth-of-type(2n+1)&#123;background:red;&#125;li:nth-of-type(2n)&#123;background:blue;&#125;/*隔行换色*/```## CSS继承文字相关的样式可以被继承 布局相关的样式不能被继承 ( 默认是不能继承的，但是可以设置继承属性 inherit 值 )```cssdiv&#123;width:100px ;height:100px;border:1px solid red;color:blue;font:size:21px;&#125;``````html<div><p>hello girl</p><div><!-- hello girl的字体颜色和字体大小改变，布局没有被继承。--><pre><code>![image-20211021100757209](CSS/image-20211021100757209.png)```cssp&amp;#123;border:inherit;&amp;#125;/*此时border属性被继承。*/</code></pre><h2 id="CSS优先级"><a href="#CSS优先级" class="headerlink" title="CSS优先级"></a>CSS优先级</h2><ul><li><p>当设置相同样式时，后面的优先级较高。</p><pre class=" language-lang-css"><code class="language-lang-css">div&#123;color:red;&#125;div&#123;color:blue;&#125;/* 优先展示蓝色字体*/</code></pre></li><li><p>内部样式和外部样式优先级相同，根据引入顺序决定优先级</p></li><li><p>单一样式优先级</p><p><img src="CSS/image-20211021210320677.png" alt="image-20211021210320677"></p></li></ul><p><img src="CSS/aaac.jpg" alt=""></p><ul><li><p>!important不能针对继承的属性进行优先级的提升</p></li><li><p>标签+类&gt;单类 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如：div.box{}&gt;.box{}</p></li><li><p>群组选择器与单一选择器的优先级相同，靠后写的优先级高。&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如：div,p{}=div{}=p{}</p></li></ul><h2 id="标签分类"><a href="#标签分类" class="headerlink" title="标签分类"></a>标签分类</h2><ul><li><h3 id="按类型"><a href="#按类型" class="headerlink" title="按类型"></a>按类型</h3><p>​    <strong>block : div、p、ul、li、h1 …</strong></p></li></ul><ol><li>独占一行</li><li>支持所有样式</li><li>不写宽的时候，跟父元素的宽相同。</li><li>所占区域是一个矩形。</li></ol><p><strong>inline : span 、a、em、strong、img …</strong></p><ol><li>贴在一起的<ol><li>有些样式不支持，例如：width、height、margin、padding</li><li>不写宽的时候，宽度由内容决定</li><li>所占的区域不一定是矩形</li><li>内联标签之间会有空隙，原因：换行产生的</li></ol></li></ol><p><strong>inline-block : input、select …</strong></p><ol><li>贴在一起，但是支持宽高</li></ol><p>注：布局一般用块标签，修饰文本一般用内联标签</p><ul><li><h3 id="按内容"><a href="#按内容" class="headerlink" title="按内容"></a>按内容</h3><p>​    Flow：流内容<br>​    Metadata：元数据<br>​    Sectioning：分区<br>​    Heading：标题<br>​    Phrasing：措辞<br>​    Embedded：嵌入的<br>​    Interactive：互动的<br>​    （详情：<a href="https://www.w3.org/TR/html5/dom.html）">https://www.w3.org/TR/html5/dom.html）</a></p><p>按显示</p><p>替换元素 :浏览器根据元素的标签和属性，来决定元素的具体显示内容。</p><p> img、input …</p><p>非替换元素 : 将内容直接告诉浏览器，将其显示出来。</p><p>div、h1、p …</p></li></ul><h2 id="CSS重置"><a href="#CSS重置" class="headerlink" title="CSS重置"></a>CSS重置</h2><p>*{ margin:0; padding:0;}<br>        优点：不用考虑哪些标签有默认的margin和padding<br>        缺点：稍微的影响性能<br>        body,p,h1,ul{ margin:0; padding:0;}</p><p>ul{ list-style : none;}    </p><p>a{ text-decoration: none; color:#999;}</p><p>img{ dispaly:block}<br>    问题的现象：图片跟容器底部有一些空隙。<br>        <strong>内联元素的对齐方式是按照文字基线对齐的，而不是文字底线对齐的。</strong><br>         vertical-align: baseline;  基线对齐方式，默认值<br>          <strong>img{ vertical-align:bottom;} 解决方式是推荐的</strong></p><p>写具体页面的时候或一个布局效果的时候：</p><pre><code>1. 写结构    2. css重置样式    3. 写具体样式</code></pre><h3 id="清除浮动元素"><a href="#清除浮动元素" class="headerlink" title="清除浮动元素"></a>清除浮动元素</h3><hr><p>浮动就是儿子飘了（float）,老子管不住儿子了（儿子高度为空）<br>清除浮动三种方法<br>1.给儿子介绍一个对象，管住儿子不要乱跑， 对象添加  clear:both<br>2.把儿子锁在家里，bfc  ，就是给老爷子设置 overflow:hidden  / overflow:auto<br>   或者老爷子出去逮住小崽子，一起浮动 老爷子设置  float<br>3.使用伪元素，就是给儿子介绍一个网恋对象（实际不存在，父亲装的） 父亲添加 类class  添加伪元素 ：after<br>   content:;display:block ；clear:both上面三种，我最经常犯的错误是给错误的对象加错东西，所以再总结一下<br>第一种：发媳妇   给儿子后面的元素加 clear :both<br>第二种：给门上锁  给父亲加  overflow 或者 float<br>第三种：父亲假扮网恋   给父亲加 :after  然后 clear:both</p><p>我经常是把css  错加给儿子  然后怎么试都不成功，子不教，父之过，应该定准浮动的父亲做文章，就不会有问题了。</p><hr><p>&lt;来自网友的总结，感觉很nice，摘录了下来。&gt;</p><h2 id="CSS定位"><a href="#CSS定位" class="headerlink" title="CSS定位"></a>CSS定位</h2><ol><li><p>position : </p><p>  relative：如果没有定位偏移量，对元素本身没有任何影响,不使元素脱离文档流，不影响其他元素布局。</p><p> left、top、right、bottom是相对于当前元素自身进行偏移的</p></li><li><p>absolute：<br> 使元素完全脱离文档流（类似于浮动）<br>使内联元素支持宽高 （让内联具备块特性）<br>使块元素默认宽根据内容决定（让块具备内联的特性）。如果有定位祖先元素相对于定位祖先元素发生偏移，没有定位祖先元素相对于整个文档发生偏移（绝对、            相对、固定）</p></li><li><p>fixed：<br>   使元素完全脱离文档流<br>   使内联元素支持宽高 （让内联具备块特性）<br>   使块元素默认宽根据内容决定（让块具备内联的特性）<br>   相对于整个浏览器窗口进行偏移，不受浏览器滚动条的影响</p></li></ol><h2 id="BFC规范"><a href="#BFC规范" class="headerlink" title="BFC规范"></a>BFC规范</h2><p>BFC即Block Formatting Contexts(块级格式化上下文)。具有BFC特性的元素可以看作是隔离了的独立容器，容器里面的元素不会在布局上影响到外面的元素，并且BFC具有普通元素所没有的一些特性。</p><ul><li>触发BFC规范的元素，可以形成一个独立的容器。不受到外界的影响，从而解决一些布局问题。</li></ul><p>1.浮动元素：float除none以外的值</p><p>2.绝对定位元素：position（absolute、fixed）</p><p>3.display 为 inline-block、table-cells、flex</p><p>4.overflow除了visible以外的值（hidden、auto、scroll）</p><h3 id="BFC特性和应用"><a href="#BFC特性和应用" class="headerlink" title="BFC特性和应用"></a>BFC特性和应用</h3><ol><li>解决margin叠加问题</li></ol><pre class=" language-lang-css"><code class="language-lang-css">       .div1&#123; width:100px; height:100px; background:red; margin-bottom: 30px;&#125;       .div2&#123; width:100px; height:100px; background:blue; margin-top: 30px;&#125;       .box&#123; display: flex;&#125;</code></pre><pre class=" language-lang-html"><code class="language-lang-html">   <div class="box">           <div class="div1"></div>       </div>       <div class="box">           <div class="div2"></div>       </div></code></pre><p>   <img src="CSS/未标题-1.jpg" style="zoom: 33%;" /></p><ol><li><p>解决margin传递问题</p><p><img src="CSS/image-20211030145339456.png" alt="image-20211030145339456" style="zoom: 33%;" /></p><pre class=" language-lang-css"><code class="language-lang-css">.div1&#123; width:200px; height:200px; background:red; &#125;    .div2&#123; width:100px; height:100px; background:blue; margin-top:50px;&#125;    .div3&#123; width:200px; height:200px; background:pink; overflow: hidden;&#125;    .div4&#123; width:100px; height:100px; background:green; margin-top:50px;&#125;</code></pre><pre class=" language-lang-html"><code class="language-lang-html"><div class="div1">            <div class="div2"></div>        </div>        <div class="div3">            <div class="div4"></code></pre></li></ol><ol><li><p>解决浮动问题</p></li><li><p>解决覆盖问题</p></li></ol></style>]]></content>
      
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> BFC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>盒子模型</title>
      <link href="/posts/ac8.html"/>
      <url>/posts/ac8.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型:"></a>盒子模型:</h1><p>在html文档中，margin和padding属性是盒子模型的组成部分，正确理解这两个属性也是学习用css布局的关键。</p><a id="more"></a><p> <img src="/posts/ac8.htm/20200223172425586.png" alt></p><p>content就是盒子里装的东西，它有高度（height）和宽度（width）,可以是图片，可以是文字或者小盒子嵌套，在现实中，内容不能大于盒子，内容大于盒子就会撑破盒子，但在css中，盒子有弹性的，顶多内容太大就会撑大盒子，但是不会损害盒子。</p><p>padding即是填充，就好像我们为了保证盒子里的东西不损坏，填充了一些东西，比如泡沫或者塑料薄膜，填充物有大有小，有软有硬，反应在网页中就是padding的大小了。</p><p>border就是再外一层的边框，因为边框有大小和颜色的属性，相当于盒子的厚度和它的颜色或者材料。</p><p>margin外边距，就是我们的盒子与其他的盒子或者其他东西的距离。假如有很多盒子，margin就是盒子之间直接的距离，可以通风，也美观同时方便取出。</p><p><img src="/posts/ac8.htm/cc.jpg" alt></p><h2 id="box-sizing"><a href="#box-sizing" class="headerlink" title="box-sizing:"></a>box-sizing:</h2><p> 盒尺寸，可以改变盒子模型的展示形态。<br>    默认值： content-box :  width、height -&gt; content<br>    border-box : width、height -&gt; content padding border</p><p>  使用的场景：    </p><ol><li><p>不用再去计算一些值</p></li><li><p>解决一些100%的问题</p><h2 id="盒子模型的问题"><a href="#盒子模型的问题" class="headerlink" title="盒子模型的问题"></a>盒子模型的问题</h2><p>   margin的覆盖问题</p><pre class=" language-lang-css"><code class="language-lang-css">   #box1&#123;width:100px;height:100px;background:red;margin-bottom:30px;&#125;   #box2&#123;width:100px;height:100px;background:blue;margin:30px 0;&#125;   #box3&#123;width:100px;height:100px;background:pink;margin-top:40px;&#125;   /* margin不会累加，而是大的margin覆盖小的。*/</code></pre></li></ol><h1 id="margin和padding的属性和语法"><a href="#margin和padding的属性和语法" class="headerlink" title="margin和padding的属性和语法"></a>margin和padding的属性和语法</h1><p>1.Margin:包括margin-top，margin-right，margin-bottom，margin-left，控制块级元素之间的距离，他们是透明不可见的，可以分别给其四个方向赋值，也可以简写，其中属性值可以是具体数字，也可以是百分比，当用百分比时，百分比参考父元素的宽度。例如，margin:40px 20px 30px 50px;表示上右下左分别为40px，20px，30px，50px。margin:20px 30px 40px;表示上右下左分别为:20px，30px，50px，30px。margin:20px 30px;表示上右下左分别为:20px，30px，20px，30px。margin:20px;表示上下左右都为20px。<br>2.Padding:包括padding-top，padding-right，padding-bottom，padding-left，控制块级元素内部内容content和border之间的距离，其代码简写请参考margin属性的写法。</p><h1 id="实例演示"><a href="#实例演示" class="headerlink" title="实例演示"></a>实例演示</h1><p><img src="/posts/ac8.htm/image-20211014000227169.png" alt="image-20211014000227169"></p><p>  盒子宽度width=content+border+padding=250</p><p>   margin外边距不算入宽度内，如果margin=20</p><p>   三个相同的加一起宽度为750，但是如果三个要在同一行，需要设置父元素宽度=750+3×40=870。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 盒子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>helloworld</title>
      <link href="/posts/cdd3.html"/>
      <url>/posts/cdd3.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>大家好，我是陈浩，这是我的新博客，以后我将在这里分享我的前端学习。<br><a id="more"></a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>这是随笔文章模板</title>
      <link href="/posts/essay-demo.html"/>
      <url>/posts/essay-demo.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="这是博主的随笔板块，后续会更新文章，目前弄好了模板格式"><a href="#这是博主的随笔板块，后续会更新文章，目前弄好了模板格式" class="headerlink" title="这是博主的随笔板块，后续会更新文章，目前弄好了模板格式~"></a>这是博主的随笔板块，后续会更新文章，目前弄好了模板格式~</h4><div class="ipage">    <div class="ititle">节选自《你若安好便是晴天》- 前言</div>  <div class="izhengwen">  <p>几场梅雨，几卷荷风，江南已是烟水迷离。小院里湿润的青苔在雨中纯净生长。这个季节，许多人都在打听关于莲荷的消息，以及茉莉在黄昏浮动的神秘幽香。不知多少人会记得有个女子，曾经走过人间四月天，又与莲开的夏季有过相濡以沫的约定。</p>  <p>一个人，一本书，一杯茶，一帘梦。有时候，寂寞是这样叫人心动，也只有此刻，世事才会如此波澜不惊。凉风吹起书页，这烟雨让尘封在书卷里的词章和故事弥漫着潮湿的气息。独倚幽窗，看转角处的青石小巷，一柄久违的油纸伞，遮住了低过屋檐的光阴。</p>  <p>时光微凉，那一场远去的往事被春水浸泡，秋风吹拂，早已洗去铅华，清绝明净。以为历经人生匆匆聚散，尝过尘世种种烟火，应该承担岁月带给我们的沧桑。可流年分明安然无恙，而山石草木是这样毫发无伤。只是曾经许过地老天荒的城，在细雨中越发地清瘦单薄。</p>  <p>青梅煎好的茶水，还是当年的味道；而我们等候的人，不会再来。后来才知道，那一袭素色白衣的女子已化身为燕，去寻觅水乡旧巢。她走过的地方，有一树一树的花开，她呢喃的梁间，还留着余温犹存的梦。有人说，她是个冰洁的女子，所以无论人世如何变迁，她都有着美丽的容颜。有人说，她是个理智的女子，不管面临怎样的诱惑，最后都可以全身而退。</p>  <p>她叫林徽因，出生于杭州，是许多人梦中期待的白莲。她在雨雾之都伦敦，发生过一场空前绝后的康桥之恋。她爱过三个男子，爱得清醒，也爱得平静。徐志摩为她徜徉在康桥，深情地等待一场旧梦可以归来。梁思成与她携手走过千山万水，为完成使命而相约白头。金岳霖为她终身不娶，痴心不改地守候一世。可她懂得人生飘忽不定，要学会随遇而安。</p>  </div></div>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
